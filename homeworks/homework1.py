# Задача 1: Найдите сумму цифр трехзначного числа.

n = 120
n1=n%10
n2=n%100 // 10
n3=n//100
print(n1+n2+n3)

# Задача 2: Петя, Катя и Сережа делают из бумаги журавликов. Вместе
# они сделали S журавликов. Сколько журавликов сделал каждый
# ребенок, если известно, что Петя и Сережа сделали одинаковое
# количество журавликов, а Катя сделала в два раза больше журавликов,
# чем Петя и Сережа вместе?

S = 60

petya = S // 6
katya = 4 * petya
seresha = S // 6

print('Петя:', petya)
print('Катя:', katya)
print('Сережа:', seresha)



# Задача 3: Вы пользуетесь общественным транспортом? Вероятно, вы
# расплачивались за проезд и получали билет с номером. Счастливым
# билетом называют такой билет с шестизначным номером, где сумма
# первых трех цифр равна сумме последних трех. Т.е. билет с номером
# 385916 – счастливый, т.к. 3+8+5=9+1+6. Вам требуется написать
# программу, которая проверяет счастливость билета.

n = 385916
n_str = str(n)
n1 = int(n_str[0]) + int(n_str[1]) + int(n_str[2])
n2 = int(n_str[3]) + int(n_str[4]) + int(n_str[5])
if n1 == n2:
    print('yes')
else:
    print('no')
    
    
# Задача 4: Требуется определить, можно ли от шоколадки размером n
# × m долек отломить k долек, если разрешается сделать один разлом по
# прямой между дольками (то есть разломить шоколадку на два
# прямоугольника).

n = 3
m = 2
k = 4
if (k % n == 0 or k % m == 0) and k <= n * m:
    print('yes')
else:
    print('no')

    
# Задача 1: На столе лежат n монеток. Некоторые из них лежат вверх
# решкой, а некоторые – гербом. Определите минимальное число
# монеток, которые нужно перевернуть, чтобы все монетки были
# повернуты вверх одной и той же стороной. Выведите минимальное
# количество монет, которые нужно перевернуть.

n = [1, 0, 1, 1, 0]
heads = 0
tails = 0

for coin in n:
    if coin == 1:
        heads += 1
    else:
        tails += 1
print(min(heads, tails))


# Петя и Катя – брат и сестра. Петя – студент, а Катя –
# школьница. Петя помогает Кате по математике. Он задумывает два
# натуральных числа X и Y (X,Y≤1000), а Катя должна их отгадать. Для
# этого Петя делает две подсказки. Он называет сумму этих чисел S и их
# произведение P. Помогите Кате отгадать задуманные Петей числа

S = 5
P = 6

for x in range(1, 1001):
    for y in range(1, 1001):
        if x + y == S and x * y == P:
            print(x, y)
            break
    else:
        continue
    break


# Задача 3: Требуется вывести все целые степени двойки (т.е. числа
# вида 2k
# ), не превосходящие числа N.

N = 10
power = 1
while power <= N:
    print(power)
    power *= 2


# Задача 1: Требуется вычислить, сколько раз встречается некоторое
# число X в массиве A[1..N]. Пользователь в первой строке вводит
# натуральное число N – количество элементов в массиве. В последующих
# строках записаны N целых чисел Ai
# . Последняя строка содержит число X

list = [1, 2, 3, 4, 5]
x = 3
for i in list:
    if i == x:
        print(len(str(i)))
        
# Вариант 2 

# # Считываем количество элементов в массиве
# n = int(input("Введите количество элементов в массиве: "))

# # Считываем элементы массива
# array = []
# print("Введите элементы массива:")
# for _ in range(n):
#     array.append(int(input()))

# # Считываем число X, которое нужно найти
# x = int(input("Введите число X: "))

# # Подсчитываем количество вхождений числа X в массиве
# count = array.count(x)

# # Выводим результат
# print(f"Число {x} встречается в массиве {count} раз(а).")

        

# Задача 2: Требуется найти в массиве A[1..N] самый близкий по
# величине элемент к заданному числу X. Пользователь в первой строке
# вводит натуральное число N – количество элементов в массиве. В
# последующих строках записаны N целых чисел Ai
# . Последняя строка
# содержит число X

list = [1, 2, 3, 4, 5]
x = 6
closest = min(list, key=lambda num: abs(num - x)) 
print(closest)

# Задача 3: В настольной игре Скрабл (Scrabble) каждая буква имеет определенную
# ценность. В случае с английским алфавитом очки распределяются так:
# ● A, E, I, O, U, L, N, S, T, R – 1 очко;
# ● D, G – 2 очка;
# ● B, C, M, P – 3 очка;
# ● F, H, V, W, Y – 4 очка;
# ● K – 5 очков;
# ● J, X – 8 очков;
# ● Q, Z – 10 очков.
# А русские буквы оцениваются так:
# ● А, В, Е, И, Н, О, Р, С, Т – 1 очко;
# ● Д, К, Л, М, П, У – 2 очка;
# ● Б, Г, Ё, Ь, Я – 3 очка;
# ● Й, Ы – 4 очка;
# ● Ж, З, Х, Ц, Ч – 5 очков;
# ● Ш, Э, Ю – 8 очков;
# ● Ф, Щ, Ъ – 10 очков.
# Напишите программу, которая вычисляет стоимость введенного пользователем слова.
# Будем считать, что на вход подается только одно слово, которое содержит либо только
# английские, либо только русские буквы.

# # Словари с очками для английских и русских букв
# scores = {
#     'A': 1, 'E': 1, 'I': 1, 'O': 1, 'U': 1, 'L': 1, 'N': 1, 'S': 1, 'T': 1, 'R': 1,
#     'D': 2, 'G': 2,
#     'B': 3, 'C': 3, 'M': 3, 'P': 3,
#     'F': 4, 'H': 4, 'V': 4, 'W': 4, 'Y': 4,
#     'K': 5,
#     'J': 8, 'X': 8,
#     'Q': 10, 'Z': 10,
#     'А': 1, 'В': 1, 'Е': 1, 'И': 1, 'Н': 1, 'О': 1, 'Р': 1, 'С': 1, 'Т': 1,
#     'Д': 2, 'К': 2, 'Л': 2, 'М': 2, 'П': 2, 'У': 2,
#     'Б': 3, 'Г': 3, 'Ё': 3, 'Ь': 3, 'Я': 3,
#     'Й': 4, 'Ы': 4,
#     'Ж': 5, 'З': 5, 'Х': 5, 'Ц': 5, 'Ч': 5,
#     'Ш': 8, 'Э': 8, 'Ю': 8,
#     'Ф': 10, 'Щ': 10, 'Ъ': 10
# }

# def calculate_word_score(word):
#     word = word.upper()
#     score = 0
#     for char in word:
#         if char in scores:
#             score += scores[char]
#         else:
#             return "Слово содержит недопустимые символы или смешанные алфавиты."
#     return score

# # Ввод слова пользователем
# word = input("Введите слово: ")
# score = calculate_word_score(word)
# print(f"Стоимость слова '{word}': {score} очков")









