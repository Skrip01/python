'''
1. Синтаксис и базовые конструкции
Переменные и типы данных
Переменные — это именованные контейнеры для хранения данных. В Python переменные не нужно объявлять перед использованием, просто присваиваем значение:

# Присваивание переменных
x = 5
y = 3.14
name = "Alice"
is_student = True


Типы данных:

int — целые числа: 5, -3
float — числа с плавающей запятой: 3.14, -0.001
str — строки: "hello", 'world'
bool — булевы значения: True, False
list — списки: [1, 2, 3]
tuple — кортежи: (1, 2, 3)
set — множества: {1, 2, 3}
dict — словари: {"key": "value"}


Условные операторы
Условные операторы позволяют выполнять разные блоки кода в зависимости от условий.

x = 10

if x > 0:
    print("x положительное")
elif x == 0:
    print("x равно нулю")
else:
    print("x отрицательное")
    

Циклы
Циклы позволяют повторять выполнение блока кода несколько раз.

Цикл for:

for i in range(5):
    print(i)  # Выводит числа от 0 до 4
    
Цикл while:

count = 0
while count < 5:
    print(count)
    count += 1  # Увеличиваем count на 1 при каждой итерации
    
    
2. Структуры данных

Списки
Списки — это изменяемые последовательности элементов.

# Создание списка
numbers = [1, 2, 3, 4, 5]

# Доступ к элементам списка
print(numbers[0])  # Выводит первый элемент списка

# Изменение элементов списка
numbers[1] = 10

# Добавление элемента в список
numbers.append(6)

# Удаление элемента из списка
numbers.remove(10)

# Итерация по списку
for number in numbers:
    print(number)
    
    
Кортежи
Кортежи — это неизменяемые последовательности элементов.

# Создание кортежа
point = (1, 2)

# Доступ к элементам кортежа
print(point[0])  # Выводит первый элемент кортежа


Множества
Множества — это неупорядоченные коллекции уникальных элементов.

# Создание множества
unique_numbers = {1, 2, 3, 3, 4}

# Добавление элемента в множество
unique_numbers.add(5)

# Удаление элемента из множества
unique_numbers.remove(3)

# Итерация по множеству
for number in unique_numbers:
    print(number)


Словари
Словари — это коллекции пар "ключ-значение".

# Создание словаря
student = {"name": "Alice", "age": 25, "is_student": True}

# Доступ к значениям по ключу
print(student["name"])  # Выводит 'Alice'

# Изменение значения по ключу
student["age"] = 26

# Добавление новой пары "ключ-значение"
student["grade"] = "A"

# Удаление пары "ключ-значение"
del student["is_student"]

# Итерация по словарю
for key, value in student.items():
    print(f"{key}: {value}")


Примеры
Пример 1: Программа для проверки четности числа

number = int(input("Введите число: "))
if number % 2 == 0:
    print(f"{number} - четное число")
else:
    print(f"{number} - нечетное число")
    

Пример 2: Программа для подсчета слов в строке

text = input("Введите строку: ")
word_count = len(text.split())
print(f"Количество слов в строке: {word_count}")


Пример 3: Калькулятор

num1 = float(input("Введите первое число: "))
num2 = float(input("Введите второе число: "))
operation = input("Введите операцию (+, -, *, /): ")

if operation == "+":
    result = num1 + num2
elif operation == "-":
    result = num1 - num2
elif operation == "*":
    result = num1 * num2
elif operation == "/":
    result = num1 / num2
else:
    result = "Неверная операция"

print(f"Результат: {result}")

Заключение
Эти основы Python являются фундаментом, на котором строятся более сложные концепции и приложения. Уделяя время практике, решая задачи и создавая небольшие проекты, вы сможете укрепить свои знания и уверенность в работе с Python.
'''